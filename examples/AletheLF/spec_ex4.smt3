(include "../../signature/rules.smt3")
(declare-sort S 0)
(declare-fun P (S) Bool)

; Assume the empty context for consistency
(define ctx0 () true)
(assume context ctx0)

(assume h1 (forall ((x S)) (P x)))
(assume h2 (not (forall ((y S)) (P y))))

; The following is the eqivalent to the `anchor` in Alethe.
; We first define the extended context, and then assume it using an
; `assume-push`.
; Contexts are read right to left here.
(define ctx1 () (@ctx ((x S) (y S)) (and (= x y) (= y y) ctx0)))
(assume-push context ctx1)

; Note that this uses the current context
(step t3 :rule refl :premises (context) :args ((@cl (= (@var ((x S)) x)
                                                    (@var ((y S)) y)))))
(step t4 :rule cong :premises (t3) :args ((@cl (= (@var ((x S)) (P x)) 
                                                  (@var ((y S)) (P y))))))
(step-pop t5 :rule bind :premises (context t4) :args ((@cl (= (forall ((x S)) (P x))
                                                              (forall ((y S)) (P y))))))
(step t6 :rule equiv_pos2 :args ((@cl (not (= (forall ((x S)) (P x))
                                             (forall ((y S)) (P y))))
                                     (not (forall ((x S)) (P x)))
                                     (forall ((y S)) (P y)))))
(step t7 :rule resolution :premises (h1 h2 t5 t6) :args (false))
